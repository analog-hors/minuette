use cozy_chess::{Board, Color, Piece, Square};

pub const CHECKMATE: i16 = 30_000;
pub const INFINITY: i16 = 31_000;

const fn s(mg: i16, eg: i16) -> i32 {
    ((eg as i32) << 16) + mg as i32
}

const TEMPO: i32 = s(  11,   13);
const MATERIAL: [i32; Piece::NUM] = [s(  42,   79), s( 202,  243), s( 204,  257), s( 242,  407), s( 514,  706), s(   0,    0)];
const PIECE_SQUARE_TABLES: [[i32; Square::NUM]; Piece::NUM] = [
    [
        s(   0,    0), s(   0,    0), s(   0,    0), s(   0,    0), s(   0,    0), s(   0,    0), s(   0,    0), s(   0,    0),
        s( -21,   39), s(   8,   41), s(   2,   33), s(  -2,   36), s(   2,   35), s(  23,   30), s(  32,   33), s(  -7,   25),
        s( -13,   30), s(  10,   33), s(   8,   20), s(   8,   28), s(  16,   26), s(  13,   22), s(  33,   28), s(   0,   19),
        s( -12,   35), s(  10,   38), s(  14,   23), s(  22,   20), s(  25,   18), s(  21,   22), s(  21,   33), s(  -4,   24),
        s(  -3,   54), s(  21,   51), s(  19,   38), s(  30,   27), s(  38,   24), s(  33,   28), s(  32,   42), s(   3,   43),
        s(   8,  104), s(  33,  115), s(  46,   94), s(  59,   77), s(  55,   70), s(  74,   65), s(  46,   98), s(  17,   88),
        s(  69,  164), s(  88,  167), s(  76,  165), s(  99,  127), s(  89,  121), s(  66,  145), s(  15,  164), s(  18,  168),
        s(   0,    0), s(   0,    0), s(   0,    0), s(   0,    0), s(   0,    0), s(   0,    0), s(   0,    0), s(   0,    0),
    ],
    [
        s(  13,   10), s(  20,    9), s(  27,   38), s(  27,   45), s(  29,   44), s(  26,   43), s(  25,   18), s(  19,    3),
        s(  11,   33), s(  21,   53), s(  36,   55), s(  38,   64), s(  42,   64), s(  47,   56), s(  31,   48), s(  28,   39),
        s(  25,   40), s(  39,   65), s(  46,   74), s(  52,   83), s(  54,   81), s(  50,   70), s(  51,   66), s(  33,   41),
        s(  37,   60), s(  54,   73), s(  56,   91), s(  59,   91), s(  66,   91), s(  62,   83), s(  62,   79), s(  49,   55),
        s(  54,   62), s(  57,   79), s(  74,   89), s(  88,   93), s(  76,  102), s(  91,   86), s(  65,   87), s(  66,   60),
        s(  53,   56), s(  86,   65), s(  96,   85), s( 112,   73), s( 134,   71), s( 127,   66), s( 105,   62), s(  71,   44),
        s(  42,   36), s(  56,   65), s(  78,   64), s( 101,   61), s(  82,   57), s( 124,   51), s(  61,   53), s(  61,   29),
        s( -78,  -13), s( -46,   60), s(   3,   67), s(  29,   59), s(  76,   49), s( -28,   57), s( -55,   63), s( -24,  -29),
    ],
    [
        s(  48,   54), s(  56,   72), s(  50,   52), s(  52,   66), s(  49,   67), s(  46,   66), s(  51,   65), s(  55,   47),
        s(  71,   63), s(  69,   71), s(  76,   73), s(  58,   79), s(  64,   80), s(  72,   76), s(  73,   79), s(  65,   56),
        s(  61,   79), s(  74,   81), s(  73,   94), s(  73,   90), s(  70,   95), s(  72,   87), s(  76,   78), s(  66,   70),
        s(  65,   75), s(  72,   94), s(  73,   99), s(  87,   98), s(  88,   95), s(  74,   93), s(  72,   87), s(  65,   71),
        s(  61,   81), s(  73,   97), s(  93,   89), s( 104,   99), s(  99,   93), s(  94,   92), s(  75,   96), s(  69,   77),
        s(  65,   84), s(  94,   80), s(  93,   91), s( 118,   81), s( 104,   81), s( 131,   84), s( 106,   87), s(  95,   77),
        s(  67,   64), s(  80,   86), s(  74,   90), s(  73,   87), s(  80,   84), s(  90,   79), s(  87,   88), s(  77,   64),
        s(  30,   91), s(  13,   88), s(  28,   89), s(   4,   95), s(  24,   96), s(  11,   97), s(  38,   81), s(  26,   82),
    ],
    [
        s(  65,  155), s(  71,  162), s(  84,  167), s(  87,  165), s(  92,  157), s(  80,  159), s(  83,  154), s(  74,  140),
        s(  53,  155), s(  63,  156), s(  74,  165), s(  77,  163), s(  80,  155), s(  76,  151), s(  81,  145), s(  52,  153),
        s(  57,  162), s(  69,  167), s(  70,  167), s(  71,  171), s(  78,  163), s(  74,  158), s(  87,  150), s(  70,  149),
        s(  66,  171), s(  63,  177), s(  78,  177), s(  85,  176), s(  93,  166), s(  79,  171), s(  85,  160), s(  77,  160),
        s(  78,  181), s(  85,  181), s(  94,  187), s( 107,  178), s( 114,  166), s( 112,  165), s( 114,  165), s( 101,  164),
        s(  94,  177), s( 114,  179), s( 117,  177), s( 132,  168), s( 148,  167), s( 143,  161), s( 154,  159), s( 126,  164),
        s( 117,  175), s( 113,  185), s( 140,  180), s( 156,  176), s( 143,  179), s( 160,  165), s( 136,  168), s( 143,  160),
        s( 136,  174), s( 125,  185), s( 142,  184), s( 140,  181), s( 153,  176), s( 157,  171), s( 144,  169), s( 153,  173),
    ],
    [
        s( 163,  351), s( 165,  336), s( 171,  330), s( 175,  333), s( 173,  332), s( 165,  323), s( 171,  323), s( 162,  345),
        s( 173,  342), s( 177,  344), s( 183,  340), s( 182,  352), s( 180,  350), s( 186,  330), s( 188,  310), s( 181,  324),
        s( 177,  348), s( 178,  363), s( 177,  385), s( 176,  374), s( 176,  379), s( 181,  380), s( 188,  369), s( 183,  353),
        s( 177,  360), s( 175,  391), s( 171,  401), s( 174,  423), s( 182,  410), s( 179,  404), s( 186,  390), s( 184,  383),
        s( 178,  371), s( 175,  398), s( 181,  414), s( 185,  430), s( 182,  432), s( 188,  428), s( 191,  420), s( 195,  397),
        s( 181,  372), s( 193,  378), s( 187,  417), s( 201,  422), s( 207,  427), s( 230,  428), s( 219,  416), s( 226,  390),
        s( 195,  361), s( 172,  401), s( 186,  422), s( 179,  432), s( 184,  446), s( 206,  428), s( 190,  413), s( 206,  405),
        s( 159,  387), s( 184,  386), s( 216,  386), s( 230,  373), s( 226,  382), s( 238,  372), s( 209,  371), s( 178,  395),
    ],
    [
        s(  34,  -56), s(  43,  -44), s(  23,  -31), s( -10,  -38), s(   2,  -46), s( -15,  -34), s(  40,  -44), s(  43,  -71),
        s(  37,  -33), s(  12,  -18), s(  -9,   -6), s( -38,    7), s( -38,    4), s( -15,   -5), s(  10,  -19), s(  28,  -37),
        s( -14,  -18), s( -12,    0), s( -59,   17), s( -68,   24), s( -67,   25), s( -60,   18), s( -28,    1), s( -35,  -11),
        s( -49,   -6), s( -53,   12), s( -79,   29), s( -94,   43), s(-106,   43), s( -72,   30), s( -66,   16), s( -94,    7),
        s( -49,    0), s( -36,   29), s( -56,   37), s( -92,   46), s(-101,   48), s( -74,   42), s( -66,   39), s( -84,   17),
        s( -45,   13), s( -19,   35), s( -58,   39), s( -52,   51), s( -21,   46), s(  10,   47), s(  -1,   48), s( -33,   12),
        s( -59,   -2), s( -16,   40), s( -48,   37), s( -17,   19), s( -28,   35), s( -38,   39), s( -11,   41), s( -31,   -4),
        s( -22,  -74), s( -46,   -8), s(  -4,  -17), s( -57,    3), s( -27,    1), s(  -7,   -5), s(  18,    5), s(  21,  -90),
    ],
];

pub fn evaluate(board: &Board) -> i16 {
    let phased_eval = TEMPO
        + evaluate_for_color(board, board.side_to_move())
        - evaluate_for_color(board, !board.side_to_move());

    let mg = phased_eval as i16 as i32;
    let eg = (phased_eval + (1 << 15)) >> 16;

    let phase = game_phase(&board);
    ((mg * phase + eg * (24 - phase)) / 24) as i16
}

fn evaluate_for_color(board: &Board, color: Color) -> i32 {
    let mut eval = 0;
    for piece in Piece::ALL {
        for square in board.colored_pieces(color, piece) {
            eval += MATERIAL[piece as usize];
            eval += PIECE_SQUARE_TABLES[piece as usize][square.relative_to(color) as usize];
        }
    }
    eval
}

fn game_phase(board: &Board) -> i32 {
    let mut phase = 0;
    phase += board.pieces(Piece::Knight).len();
    phase += board.pieces(Piece::Bishop).len();
    phase += board.pieces(Piece::Rook).len() * 2;
    phase += board.pieces(Piece::Queen).len() * 4;

    phase.min(24) as i32
}
